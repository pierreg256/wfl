// Generated by CoffeeScript 1.3.3
(function() {
  var app, inspect, options, wfl;

  wfl = require('../../lib/wfl');

  inspect = require('eyes').inspector();

  options = {
    domain: "demos",
    name: "transcoder"
  };

  app = wfl(options);

  app.useActivity("checkVideo", function(request, response) {
    app.logger.verbose("" + request.id + " - Checking video: " + request.input.url);
    return response.send({
      status: "OK",
      message: "Found Video in S3",
      size: 1257
    });
  });

  app.useActivity("shortenVideo", function(request, response) {
    app.logger.verbose("" + request.id + " - Shortening video: " + request.input.url);
    return response.send({
      status: "OK",
      message: "Video Shortened successfully"
    });
  });

  app.useActivity("catCheck", function(request, response) {
    app.logger.verbose("" + request.id + " - Checking video: " + request.input.url + " for cats");
    return response.send({
      status: "OK",
      message: "Clean Video",
      cats: false
    });
  });

  app.useActivity("rejectVideo", function(request, response) {
    app.logger.verbose("" + request.id + " - Rejected video: " + request.input.url + ". sending email to the user");
    return response.send({
      status: "OK",
      message: "Video Rejected"
    });
  });

  app.useActivity("transcodeVideo", function(request, response) {
    app.logger.verbose("" + request.id + " - Transcoding video: " + request.input.url + ".");
    return response.send({
      status: "OK",
      message: "Transcoded to format H264/AAC"
    });
  });

  app.useActivity("publishVideo", function(request, response) {
    app.logger.verbose("" + request.id + " - Publishing video: " + request.input.url + ". sending email to the user");
    return response.send({
      status: "OK",
      message: "Video Published"
    });
  });

  app.makeDecision("/start", function(request, response) {
    app.logger.verbose("Sceduling activity checkVideo");
    return response.scheduleActivity("checkVideo", {
      url: request.input.url
    });
  });

  app.makeDecision("/start/checkVideo", function(request, response) {
    app.logger.verbose("Activity " + request.task.id + " responded with the following status: " + request.task.status);
    switch (request.task.status) {
      case "SCHEDULED":
      case "STARTED":
        return response.wait();
      case "TIMED_OUT":
        app.logger.verbose("Activity " + request.task.id + " timed out, cancelling the workflow");
        return response.cancel("Activity " + request.task.id + " timed out");
      case "COMPLETED":
        app.logger.verbose("Activity " + request.task.id + " completed, checking result...");
        if (request.task.result.status === "OK") {
          if (request.task.result.size > 128) {
            app.logger.verbose("Sceduling activity shortenVideo");
            return response.scheduleActivity("shortenVideo", {
              url: request.input.url
            });
          } else {
            app.logger.verbose("Sceduling activity catCheck");
            return response.scheduleActivity("catCheck", {
              url: request.input.url
            });
          }
        } else {
          app.logger.verbose("Activity " + request.task.id + " responded in error, cancelling...");
          return response.cancel("Activity " + request.task.id + " responded in error...");
        }
        break;
      default:
        app.logger.verbose("Activity " + request.task.id + " ended with an unknown status of " + request.task.status + "... cancelling");
        return response.cancel("Activity " + request.task.id + " ended with an unknown status of " + request.task.status + "... cancelling");
    }
  });

  app.makeDecision("/start/checkVideo/shortenVideo", function(request, response) {
    app.logger.verbose("Activity " + request.task.id + " responded with the following status: " + request.task.status);
    switch (request.task.status) {
      case "SCHEDULED":
      case "STARTED":
        return response.wait();
      case "TIMED_OUT":
        app.logger.verbose("Activity " + request.task.id + " timed out, cancelling the workflow");
        return response.cancel("Activity " + request.task.id + " timed out");
      case "COMPLETED":
        app.logger.verbose("Activity " + request.task.id + " completed, checking result...");
        if (request.task.result.status === "OK") {
          app.logger.verbose("Sceduling activity catCheck");
          return response.scheduleActivity("catCheck", {
            url: request.input.url
          });
        } else {
          app.logger.verbose("Activity " + request.task.id + " responded in error, cancelling...");
          return response.cancel("Activity " + request.task.id + " responded in error...");
        }
        break;
      default:
        app.logger.verbose("Activity " + request.task.id + " ended with an unknown status of " + request.task.status + "... cancelling");
        return response.cancel("Activity " + request.task.id + " ended with an unknown status of " + request.task.status + "... cancelling");
    }
  });

  app.makeDecision("/start/checkVideo/shortenVideo/catCheck", function(request, response) {
    app.logger.verbose("Activity " + request.task.id + " responded with the following status: " + request.task.status);
    switch (request.task.status) {
      case "SCHEDULED":
      case "STARTED":
        return response.wait();
      case "TIMED_OUT":
        app.logger.verbose("Activity " + request.task.id + " timed out, cancelling the workflow");
        return response.cancel("Activity " + request.task.id + " timed out");
      case "COMPLETED":
        app.logger.verbose("Activity " + request.task.id + " completed, checking result...");
        if (request.task.result.status === "OK") {
          if (request.task.result.cats === true) {
            app.logger.verbose("Sceduling activity rejectVideo");
            return response.scheduleActivity("rejectVideo", {
              url: request.input.url
            });
          } else {
            app.logger.verbose("Sceduling activity transcodeVideo");
            return response.scheduleActivity("transcodeVideo", {
              url: request.input.url
            });
          }
        } else {
          app.logger.verbose("Activity " + request.task.id + " responded in error, cancelling...");
          return response.cancel("Activity " + request.task.id + " responded in error...");
        }
        break;
      default:
        app.logger.verbose("Activity " + request.task.id + " ended with an unknown status of " + request.task.status + "... cancelling");
        return response.cancel("Activity " + request.task.id + " ended with an unknown status of " + request.task.status + "... cancelling");
    }
  });

  app.makeDecision("/start/checkVideo/shortenVideo/catCheck/transcodeVideo", function(request, response) {
    app.logger.verbose("Activity " + request.task.id + " responded with the following status: " + request.task.status);
    switch (request.task.status) {
      case "SCHEDULED":
      case "STARTED":
        return response.wait();
      case "TIMED_OUT":
        app.logger.verbose("Activity " + request.task.id + " timed out, cancelling the workflow");
        return response.cancel("Activity " + request.task.id + " timed out");
      case "COMPLETED":
        app.logger.verbose("Activity " + request.task.id + " completed, checking result...");
        if (request.task.result.status === "OK") {
          app.logger.verbose("Sceduling activity publishVideo");
          return response.scheduleActivity("publishVideo", {
            url: request.input.url
          });
        } else {
          app.logger.verbose("Activity " + request.task.id + " responded in error, cancelling...");
          return response.cancel("Activity " + request.task.id + " responded in error...");
        }
        break;
      default:
        app.logger.verbose("Activity " + request.task.id + " ended with an unknown status of " + request.task.status + "... cancelling");
        return response.cancel("Activity " + request.task.id + " ended with an unknown status of " + request.task.status + "... cancelling");
    }
  });

  app.makeDecision("/start/checkVideo/shortenVideo/catCheck/transcodeVideo/publishVideo", function(request, response) {
    app.logger.verbose("Activity " + request.task.id + " responded with the following status: " + request.task.status);
    switch (request.task.status) {
      case "SCHEDULED":
      case "STARTED":
        return response.wait();
      case "TIMED_OUT":
        app.logger.verbose("Activity " + request.task.id + " timed out, cancelling the workflow");
        return response.cancel("Activity " + request.task.id + " timed out");
      case "COMPLETED":
        app.logger.verbose("Activity " + request.task.id + " completed, checking result...");
        if (request.task.result.status === "OK") {
          app.logger.verbose("Workflow Terminated, signaling end of workflow");
          return response.end({
            status: "OK",
            message: "Video Published, workflow successfully completed!"
          });
        } else {
          app.logger.verbose("Activity " + request.task.id + " responded in error, cancelling...");
          return response.cancel("Activity " + request.task.id + " responded in error...");
        }
        break;
      default:
        app.logger.verbose("Activity " + request.task.id + " ended with an unknown status of " + request.task.status + "... cancelling");
        return response.cancel("Activity " + request.task.id + " ended with an unknown status of " + request.task.status + "... cancelling");
    }
  });

  app.listen();

}).call(this);
