// Generated by CoffeeScript 1.3.3
(function() {
  var app, inspect, options, wfl;

  wfl = require('../lib/wfl');

  inspect = require('eyes').inspector();

  options = {
    domain: "wfl-dev-2"
  };

  app = wfl(options);

  app.useActivity("hello", function(request, response) {
    return response.send("Hello");
  });

  app.useActivity("world", function(request, response) {
    return response.send(request.input + ", World!");
  });

  app.makeDecision("/start", function(request, response) {
    inspect(request, "Request");
    return response.scheduleActivity("hello", "my name");
  });

  app.makeDecision("/start/hello", function(request, response) {
    inspect(request, "Activity request in /start/hello decision");
    switch (request.task.status) {
      case "SCHEDULED":
      case "STARTED":
        return app.logger.debug("activity hello status: " + request.task.status);
      case "TIMED_OUT":
        app.logger.debug("activity hello timed out, cancelling the workflow");
        return response.cancel("activity hello timed out");
      case "COMPLETED":
        app.logger.debug("activity hello completed, scheduling world activity");
        return response.scheduleActivity("world", request.task.result);
      default:
        return response.cancel("unknown status detected... cancelling");
    }
  });

  app.makeDecision("/start/hello/world", function(request, response) {
    switch (request.task.status) {
      case "SCHEDULED":
      case "STARTED":
        return app.logger.debug("activity world status: " + request.task.status);
      case "TIMED_OUT":
        app.logger.debug("activity world timed out, cancelling the workflow");
        return response.cancel("activity world timed out");
      case "COMPLETED":
        app.logger.debug("activity world completed with the following result: " + request.task.result + " ");
        return response.end(request.task.result);
      default:
        return response.cancel("unknown status detected... cancelling");
    }
  });

  app.logger.info("Starting application");

  app.listen();

}).call(this);
