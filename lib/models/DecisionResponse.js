// Generated by CoffeeScript 1.3.3

/* 
THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/


(function() {
  var DecisionResponse, inspect,
    __slice = [].slice;

  inspect = require('eyes').inspector();

  DecisionResponse = (function() {

    function DecisionResponse(app, token) {
      this.app = app;
      this.token = token;
    }

    DecisionResponse.prototype.scheduleActivity = function(activityName, inputValue) {
      var acti, taskList;
      if (inputValue == null) {
        inputValue = "";
      }
      if (typeof inputValue !== "string") {
        inputValue = "" + JSON.stringify(inputValue);
      }
      taskList = "";
      for (acti in this.app.options.activities) {
        if (this.app.options.activities[acti].name === activityName) {
          taskList = this.app.options.activities[acti].taskList;
        }
      }
      return this._scheduleActivityTask(activityName, taskList, inputValue);
    };

    DecisionResponse.prototype.cancel = function(reason) {
      return this._failWorkflowExecution(reason);
    };

    DecisionResponse.prototype.end = function(result) {
      var decisions;
      if (result == null) {
        result = "";
      }
      if (typeof result !== "string") {
        result = "" + JSON.stringify(result);
      }
      decisions = [
        {
          "decisionType": "CompleteWorkflowExecution",
          "completeWorkflowExecutionDecisionAttributes": {
            "result": result
          }
        }
      ];
      return this._respondCompleted(decisions);
    };

    DecisionResponse.prototype._respondCompleted = function(decisions, callBack) {
      var swfCfg,
        _this = this;
      swfCfg = {
        "TaskToken": this.token,
        "Decisions": decisions
      };
      return this.app.swf.RespondDecisionTaskCompleted(swfCfg, function(err, data) {
        if (callBack != null) {
          return process.nextTick(function() {
            return callBack(err, data);
          });
        } else {
          if (err != null) {
            console.log("Error executing: respondCompleted");
          }
          if (data != null) {
            return console.log("Successfully executed: respondCompleted");
          }
        }
      });
    };

    DecisionResponse.prototype._completeWorkflowExecution = function(callBack) {
      var decisions;
      decisions = [
        {
          "decisionType": "CompleteWorkflowExecution",
          "completeWorkflowExecutionDecisionAttributes": {
            "result": "Finished !"
          }
        }
      ];
      return this._respondCompleted(decisions, callBack);
    };

    DecisionResponse.prototype._failWorkflowExecution = function() {
      var cBack, callBack, decisions, details, reason, _i, _ref;
      reason = arguments[0], details = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callBack = arguments[_i++];
      decisions = [
        {
          "decisionType": "FailWorkflowExecution",
          "failWorkflowExecutionDecisionAttributes": {
            "reason": reason,
            "details": (_ref = details[0]) != null ? _ref : "none provided by the user"
          }
        }
      ];
      cBack = callBack != null ? callBack : function(err) {
        if (err != null) {
          return console.log("Error executing: failWorkflowExecution");
        }
      };
      return this._respondCompleted(decisions, cBack);
    };

    DecisionResponse.prototype._scheduleActivityTask = function(activityName, taskList, inputValue, callBack) {
      var cBack, decisions;
      decisions = [
        {
          "decisionType": "ScheduleActivityTask",
          "scheduleActivityTaskDecisionAttributes": {
            "activityId": activityName + "-" + ((Math.random() + "").substr(2)),
            "activityType": {
              "name": activityName,
              "version": "1.0"
            },
            "input": inputValue,
            "taskList": {
              "name": taskList
            }
          }
        }
      ];
      cBack = callBack != null ? callBack : function(err) {
        if (err != null) {
          return console.log("Error executing: scheduleActivityTask");
        }
      };
      return this._respondCompleted(decisions, cBack);
    };

    return DecisionResponse;

  })();

  exports.DecisionResponse = DecisionResponse;

}).call(this);
