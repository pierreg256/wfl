// Generated by CoffeeScript 1.3.3
(function() {
  var AWS, Decider, Response, inspect, routeUtils,
    __slice = [].slice;

  AWS = require('aws-sdk');

  inspect = require('eyes').inspector();

  routeUtils = require('../utils/routes');

  Response = (function() {

    function Response(app, swf, token, logger) {
      this.app = app;
      this.swf = swf;
      this.token = token;
      this.logger = logger;
    }

    Response.prototype.scheduleActivity = function(activityName, inputValue) {
      var acti, taskList;
      if (inputValue == null) {
        inputValue = "";
      }
      if (typeof inputValue !== "string") {
        inputValue = "" + JSON.stringify(inputValue);
      }
      taskList = "";
      for (acti in this.app.options.activities) {
        if (this.app.options.activities[acti].name === activityName) {
          taskList = this.app.options.activities[acti].taskList;
        }
      }
      return this._scheduleActivityTask(activityName, taskList, inputValue);
    };

    Response.prototype.cancel = function(reason) {
      return this._failWorkflowExecution(reason);
    };

    Response.prototype.end = function(result) {
      var decisions,
        _this = this;
      if (result == null) {
        result = "";
      }
      if (typeof result !== "string") {
        result = "" + JSON.stringify(result);
      }
      decisions = [
        {
          "decisionType": "CompleteWorkflowExecution",
          "completeWorkflowExecutionDecisionAttributes": {
            "result": result
          }
        }
      ];
      return this._respondCompleted(decisions, function(err, data) {
        return _this.app.logger.verbose("Successfully completed workflow");
      });
    };

    Response.prototype._respondCompleted = function(decisions, callBack) {
      var swfCfg,
        _this = this;
      swfCfg = {
        "taskToken": this.token,
        "decisions": decisions
      };
      return this.swf.respondDecisionTaskCompleted(swfCfg).always(function(response) {
        if (callBack != null) {
          return process.nextTick(function() {
            return callBack(response.error, response.data);
          });
        } else {
          if (response.error != null) {
            console.log("Error executing: respondCompleted");
          }
          if (response.data != null) {
            return console.log("Successfully executed: respondCompleted");
          }
        }
      });
    };

    Response.prototype._completeWorkflowExecution = function(callBack) {
      var cBack, decisions;
      decisions = [
        {
          "decisionType": "CompleteWorkflowExecution",
          "completeWorkflowExecutionDecisionAttributes": {
            "result": "Finished !"
          }
        }
      ];
      cBack = callBack != null ? callBack : function(err) {
        if (err != null) {
          return console.log("Error executing: completeWorkflowExecution");
        }
      };
      return this._respondCompleted(decisions, cBack);
    };

    Response.prototype._failWorkflowExecution = function() {
      var cBack, callBack, decisions, details, reason, _i, _ref;
      reason = arguments[0], details = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callBack = arguments[_i++];
      decisions = [
        {
          "decisionType": "FailWorkflowExecution",
          "failWorkflowExecutionDecisionAttributes": {
            "reason": reason,
            "details": (_ref = details[0]) != null ? _ref : "none provided by the user"
          }
        }
      ];
      cBack = callBack != null ? callBack : function(err) {
        if (err != null) {
          return console.log("Error executing: failWorkflowExecution");
        }
      };
      return this._respondCompleted(decisions, cBack);
    };

    Response.prototype._scheduleActivityTask = function(activityName, taskList, inputValue, callBack) {
      var cBack, decisions;
      decisions = [
        {
          "decisionType": "ScheduleActivityTask",
          "scheduleActivityTaskDecisionAttributes": {
            "activityId": activityName + "-" + ((Math.random() + "").substr(2)),
            "activityType": {
              "name": activityName,
              "version": "1.0"
            },
            "input": inputValue,
            "taskList": {
              "name": taskList
            }
          }
        }
      ];
      cBack = callBack != null ? callBack : function(err) {
        if (err != null) {
          inspect(err, "Error executing: scheduleActivityTask");
          return process.exit(1);
        }
      };
      return this._respondCompleted(decisions, cBack);
    };

    return Response;

  })();

  Decider = (function() {

    function Decider(app) {
      var SWF, swfCfg, _ref, _ref1,
        _this = this;
      this.app = app;
      swfCfg = {
        'accessKeyId': this.app.options.accessKeyId,
        'secretAccessKey': this.app.options.secretAccessKey,
        'region': this.app.options.region
      };
      AWS.config.update(swfCfg);
      SWF = new AWS.SimpleWorkflow;
      this.swf = SWF.client;
      if ((_ref = this.name) == null) {
        this.name = "" + this.app.options.domain + "-" + this.app.options.name + "-decider";
      }
      if ((_ref1 = this.taskList) == null) {
        this.taskList = function() {
          return "" + _this.app.options.domain + "-" + _this.app.options.name + "-decider-default-tasklist";
        };
      }
      this.routes = [];
    }

    Decider.prototype.addDecision = function(route, decisionFn) {
      return this.routes.push({
        "route": route,
        "decisionTask": decisionFn
      });
    };

    Decider.prototype.listen = function() {
      var _this = this;
      return process.nextTick(function() {
        return _this.poll();
      });
    };

    Decider.prototype.poll = function() {
      var request, swfCfg,
        _this = this;
      this.app.logger.verbose("Polling for next decision in list:" + (this.app.options.decider.taskList()));
      swfCfg = {
        'domain': this.app.options.domain,
        'taskList': {
          'name': "" + (this.app.options.decider.taskList())
        }
      };
      request = this.swf.pollForDecisionTask(swfCfg);
      request.done(function(response) {
        var body, nextPageToken, token;
        body = response.data;
        token = body.taskToken;
        nextPageToken = body.nextPageToken;
        if (nextPageToken != null) {
          _this.app.logger.error("Multipage history not yet implemented. Quitting");
          process.exit(1);
        }
        if (token != null) {
          return routeUtils.makeRoute(body.events, function(routeError, request) {
            var found, tmpRoute;
            response = new Response(_this.app, _this.swf, token, _this.logger);
            found = false;
            for (tmpRoute in _this.routes) {
              if (_this.routes[tmpRoute].route === request.url) {
                _this.app.logger.debug("Making following decision: " + _this.routes[tmpRoute].route);
                _this.routes[tmpRoute].decisionTask(request, response);
                found = true;
              }
            }
            if (!found) {
              _this.app.logger.warn("no suitable route found for url: " + request.url);
              return response.cancel("no suitable route found for url: " + request.url + " ");
            }
          });
        } else {
          return _this.app.logger.verbose("No decision in the pipe for " + (_this.app.options.decider.taskList()));
        }
      });
      request.fail(function(response) {
        _this.logger.critical("Unexpected Error polling decision task, see the following details for more info");
        inspect(response.error, "Error returned by PollForDecisionTask");
        return process.exit(1.);
      });
      return request.always(function(response) {
        return process.nextTick(function() {
          return _this.poll();
        });
      });
    };

    return Decider;

  })();

  exports.Decider = Decider;

}).call(this);
