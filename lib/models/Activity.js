// Generated by CoffeeScript 1.3.3
(function() {
  var Activity, Response, Swf, amazon, awssum;

  awssum = require('awssum');

  amazon = awssum.load('amazon/amazon');

  Swf = awssum.load('amazon/swf').Swf;

  Response = (function() {

    function Response(swf, token, logger) {
      this.swf = swf;
      this.token = token;
      this.logger = logger;
    }

    Response.prototype.send = function(result, callBack) {
      var swfCfg,
        _this = this;
      if (typeof result !== "string") {
        result = JSON.stringify(result);
      }
      swfCfg = {
        "TaskToken": this.token,
        "Result": result
      };
      if (callBack == null) {
        callBack = function(err, result) {
          if (err != null) {
            if (err != null) {
              _this.app.logger.error("Error sending activity response", err);
            }
            process.exit(1);
          }
          return _this.logger.verbose("RespondActivityTaskCompleted sent successfully with the following result: " + result + " ");
        };
      }
      this.logger.verbose("Sending activity response to SWF...");
      return this.swf.RespondActivityTaskCompleted(swfCfg, callBack);
    };

    Response.prototype.cancel = function(result, callBack) {
      var swfCfg,
        _this = this;
      if (typeof result !== "string") {
        result = JSON.stringify(result);
      }
      swfCfg = {
        "TaskToken": this.token,
        "Details": result
      };
      if (callBack == null) {
        callBack = function(err, result) {
          if (err != null) {
            if (err != null) {
              _this.app.logger.error("Error cancelling activity", err);
            }
            inspect(err, "Error message");
            process.exit(1);
          }
          return _this.logger.verbose("RespondActivityTaskCanceled sent successfully with the following detail: " + result + " ");
        };
      }
      this.logger.verbose("Sending activity response to SWF...");
      return this.swf.RespondActivityTaskCanceled(swfCfg, callBack);
    };

    return Response;

  })();

  Activity = (function() {

    function Activity(app, name, coreFn) {
      var swfCfg;
      this.app = app;
      this.name = name;
      this.coreFn = coreFn;
      this.taskList = "" + name + "-default-tasklist";
      swfCfg = {
        'accessKeyId': this.app.options.accessKeyId,
        'secretAccessKey': this.app.options.secretAccessKey,
        'region': this.app.options.region
      };
      this.swf = new Swf(swfCfg);
    }

    Activity.prototype.poll = function() {
      var swfCfg,
        _this = this;
      this.app.logger.verbose("Polling for next task for: " + this.name + " in list:" + this.taskList);
      swfCfg = {
        'Domain': this.app.options.domain,
        'TaskList': {
          "name": this.taskList
        }
      };
      return this.swf.PollForActivityTask(swfCfg, function(err, data) {
        var body, request, response, token, _ref, _ref1;
        if (err != null) {
          _this.app.logger.error("Unexpected Error polling " + _this.taskList + " ", err);
          process.exit(1);
        } else {
          body = data.Body;
          token = body.taskToken;
          if (!(token != null)) {
            _this.app.logger.verbose("No activity task in the pipe for " + _this.taskList + ", repolling...");
          } else {
            _this.app.logger.verbose("New Activity task received for: " + _this.name + " in list:" + _this.taskList);
            request = {
              name: body.activityType.name,
              id: body.activityId,
              workflowId: body.workflowExecution.workflowId,
              input: "",
              task: body
            };
            try {
              request.input = JSON.parse((_ref = body.input) != null ? _ref : "");
            } catch (e) {
              request.input = (_ref1 = body.input) != null ? _ref1 : {};
            }
            response = new Response(_this.swf, token, _this.app.logger);
            _this.app.logger.verbose("Start running activity: " + _this.name + " with id: " + request.id + " ");
            _this.coreFn(request, response);
          }
        }
        return process.nextTick(function() {
          return _this.poll();
        });
      });
    };

    return Activity;

  })();

  exports.Activity = Activity;

}).call(this);
