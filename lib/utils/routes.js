// Generated by CoffeeScript 1.3.3
(function() {
  var inspect, wfl_history, _getEventFromId, _getProp;

  inspect = require('eyes').inspector();

  wfl_history = require("./wfl-history-cfg").cfg;

  _getProp = function(obj, path) {
    var i, tmpObj, _i, _len, _ref;
    tmpObj = obj;
    _ref = path.split(".");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      tmpObj = tmpObj[i];
    }
    return tmpObj;
  };

  _getEventFromId = function(events, id) {
    var i, result;
    result = -1;
    for (i in events) {
      if (events[i].eventId === id) {
        result = i;
      }
    }
    return result;
  };

  exports.makeRoute = function(events, callBack) {
    var evt, evt_id_to_skip, evt_tool, fini, handled, history, i, info, lastActivityId, pos, request, response, route, source_evt, task, tmp, _base, _i, _len, _ref, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    if (events == null) {
      events = [];
    }
    request = {};
    response = {};
    route = [];
    history = [];
    pos = events.length - 1;
    fini = events.length < 1;
    while (!(fini || pos < 0)) {
      handled = false;
      evt = events[pos];
      if (wfl_history.hasOwnProperty(evt.eventType) && !evt.scanned) {
        evt_tool = wfl_history[evt.eventType];
        source_evt = events[_getEventFromId(events, _getProp(evt, evt_tool.info._eventId))];
        request = {};
        if (evt_tool.type === "decision") {
          request.decisionTask = {};
          task = request.decisionTask;
        }
        if (evt_tool.type === "activity") {
          request.activityTask = {};
          task = request.activityTask;
        }
        if (evt_tool.type === "workflow") {
          request.workflowTask = {};
          task = request.workflowTask;
        }
        task.status = evt_tool.status;
        for (info in evt_tool.info) {
          if (info.charAt(0) !== "_") {
            task[info] = _getProp(source_evt, evt_tool.info[info]);
          } else {
            if (info.charAt(1) === "_") {
              task[info.substring(2)] = _getProp(evt, evt_tool.info[info]);
            }
          }
        }
        source_evt.scanned = true;
        _ref = evt_tool.discard;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          evt_id_to_skip = _getProp(evt, i);
          if (evt_id_to_skip !== 0) {
            events[_getEventFromId(events, _getProp(evt, i))].scanned = true;
          }
        }
        history.push(request);
      } else {
        if (!evt.scanned) {
          inspect(evt, "Unhandled event type");
          throw "Unhandled event " + evt.eventType + " ";
          fini = true;
        }
      }
      pos--;
    }
    request = {
      input: null,
      url: ""
    };
    history = history.reverse();
    lastActivityId = "";
    for (i in history) {
      tmp = history[i];
      if ((tmp.workflowTask != null) && tmp.workflowTask.status === "STARTED") {
        request.url += "/start";
        task = tmp.workflowTask;
        try {
          if ((_ref1 = request.input) == null) {
            request.input = JSON.parse(task.input);
          }
        } catch (e) {
          if ((_ref2 = request.input) == null) {
            request.input = (_ref3 = task.input) != null ? _ref3 : {};
          }
        }
      }
      if (tmp.activityTask != null) {
        if (lastActivityId !== tmp.activityTask.id) {
          request.url += "/" + tmp.activityTask.name;
        }
        if (tmp.activityTask.status === "SCHEDULED") {
          request.input = "";
        }
        task = tmp.activityTask;
        try {
          if ((_ref4 = request.input) == null) {
            request.input = JSON.parse(task.input);
          }
        } catch (e) {
          if ((_ref5 = request.input) == null) {
            request.input = (_ref6 = task.input) != null ? _ref6 : {};
          }
        }
      }
      request.task = task;
    }
    if (typeof request.input === 'string') {
      try {
        request.input = JSON.parse(request.input);
      } catch (e) {
        if ((_ref7 = request.input) == null) {
          request.input = (_ref8 = request.input) != null ? _ref8 : {};
        }
      }
    }
    if ((request.task.result != null) && typeof request.task.result === 'string') {
      try {
        request.task.result = JSON.parse(request.task.result);
      } catch (e) {
        if ((_ref9 = (_base = request.task).result) == null) {
          _base.result = (_ref10 = request.task.result) != null ? _ref10 : {};
        }
      }
    }
    return callBack(null, request);
  };

}).call(this);
