// Generated by CoffeeScript 1.3.3
(function() {
  var Activity, ActivityResponse, Application, Decider, DecisionResponse, Swf, amazon, awssum, checkUtils, createApplication, inspect, path, spawn;

  inspect = require('eyes').inspector();

  path = require('path');

  spawn = require('child_process').spawn;

  awssum = require('awssum');

  amazon = awssum.load('amazon/amazon');

  Swf = awssum.load('amazon/swf').Swf;

  checkUtils = require('./utils/checks');

  DecisionResponse = require("./models/DecisionResponse").DecisionResponse;

  ActivityResponse = require("./models/ActivityResponse").ActivityResponse;

  Activity = require("./models/Activity").Activity;

  Decider = require("./models/Decider").Decider;

  createApplication = function(options) {
    var app;
    app = new Application(options);
    return app;
  };

  Application = (function() {

    function Application(options) {
      var swfCfg, winston, _base, _base1, _base2, _base3, _base4, _base5, _base6, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      this.config = require('nconf');
      this.config.argv().env().file({
        file: './swf-config.json'
      });
      if (options == null) {
        options = {};
      }
      this.options = options;
      if ((_ref = (_base = this.options).force) == null) {
        _base.force = (_ref1 = this.config.get("force")) != null ? _ref1 : false;
      }
      if ((_ref2 = (_base1 = this.options).accessKeyId) == null) {
        _base1.accessKeyId = (_ref3 = (_ref4 = this.config.get("accessKeyId")) != null ? _ref4 : this.config.get("AWS_ACCESS_KEY")) != null ? _ref3 : "BAD_KEY";
      }
      if ((_ref5 = (_base2 = this.options).secretAccessKey) == null) {
        _base2.secretAccessKey = (_ref6 = (_ref7 = this.config.get("secretAccessKey")) != null ? _ref7 : this.config.get("AWS_SECRET_KEY")) != null ? _ref6 : "BAD_SECRET_KEY";
      }
      if ((_ref8 = (_base3 = this.options).region) == null) {
        _base3.region = (_ref9 = this.config.get("region")) != null ? _ref9 : "us-east-1";
      }
      if ((_ref10 = (_base4 = this.options).domain) == null) {
        _base4.domain = (_ref11 = this.config.get("domain")) != null ? _ref11 : "sample-domain";
      }
      if ((_ref12 = (_base5 = this.options).name) == null) {
        _base5.name = (_ref13 = this.config.get("name")) != null ? _ref13 : "sample-workflow";
      }
      if ((_ref14 = (_base6 = this.options).decider) == null) {
        _base6.decider = new Decider(this);
      }
      this.options.activities = [];
      this.configStatus = 0;
      swfCfg = {
        'accessKeyId': this.options.accessKeyId,
        'secretAccessKey': this.options.secretAccessKey,
        'region': this.options.region
      };
      this.swf = new Swf(swfCfg);
      winston = require('winston');
      this.logger = new winston.Logger({
        transports: [
          new winston.transports.Console({
            'colorize': true,
            level: 'verbose'
          })
        ]
      });
      if (this.config.get("noCheck")) {
        this.configStatus = 2;
      }
    }

    Application.prototype.useActivity = function(name, activityFn) {
      return this.options.activities.push(new Activity(this, name, activityFn));
    };

    Application.prototype.makeDecision = function(route, decisionFn) {
      return this.options.decider.addDecision(route, decisionFn);
    };

    Application.prototype.start = function(inputValue) {
      var _this = this;
      return this._checkConfig(function() {
        var swfCfg;
        if (inputValue == null) {
          inputValue = "";
        }
        if (typeof inputValue !== "string") {
          inputValue = "" + JSON.stringify(inputValue);
        }
        swfCfg = {
          "Domain": _this.options.domain,
          "WorkflowId": _this.options.name + "-" + ((Math.random() + "").substr(2)),
          "WorkflowType": {
            "name": _this.options.name,
            "version": "1.0"
          },
          "Input": inputValue
        };
        return _this.swf.StartWorkflowExecution(swfCfg, function(err, data) {
          if (err != null) {
            _this.logger.error("Unexpected error starting workflow", err);
          }
          if (data != null) {
            return _this.logger.info("Started workflow execution with the following id: " + swfCfg.WorkflowId);
          }
        });
      });
    };

    Application.prototype.listen = function() {
      var _this = this;
      return this._checkConfig(function() {
        return _this._startListeners();
      });
    };

    Application.prototype._checkConfig = function(callBack) {
      var _ref,
        _this = this;
      if ((_ref = this.configStatus) == null) {
        this.configStatus = 0;
      }
      if (this.configStatus === 2) {
        return callBack();
      }
      if (this.configStatus === 1) {
        return setTimeout(function() {
          return _this._checkConfig(callBack);
        }, 1000);
      }
      if (this.configStatus === 0) {
        this.configStatus = 1;
        this.logger.info("Checking config, please wait...");
        return checkUtils.checkDomain(this.swf, this.options.domain, this.options.force, function(err, data) {
          if (err != null) {
            _this.configStatus = 0;
            return _this.logger.error(err.message, err.context);
          } else {
            _this.logger.info("Domain " + _this.options.domain + " checked!");
            return checkUtils.checkWorkflow(_this.swf, _this.options.domain, _this.options.name, _this.options.decider.taskList(), _this.options.force, function(errD, dataD) {
              var func, i;
              if (errD != null) {
                _this.configStatus = 0;
                return _this.logger.error(errD.message, errD.context);
              } else {
                _this.logger.info("Workflow " + _this.options.name + " checked!");
                func = function(e, d) {
                  if (e != null) {
                    _this.configStatus = 0;
                    return _this.logger.error(e.message, e.context);
                  } else {
                    i++;
                    if (i > 0) {
                      _this.logger.info("Activity " + _this.options.activities[i - 1].name + " checked!");
                    }
                    if (_this.options.activities[i] != null) {
                      return checkUtils.checkActivity(_this.swf, _this.options.domain, _this.options.activities[i].name, _this.options.activities[i].taskList, _this.options.force, func);
                    } else {
                      _this.configStatus = 2;
                      return callBack();
                    }
                  }
                };
                i = -1;
                return func();
              }
            });
          }
        });
      }
    };

    Application.prototype._startListeners = function() {
      var activ, activityName, activityProcess, deciderProcess, i, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      if (this.config.get("startDecider")) {
        this.logger.debug("starting decider");
        return this.options.decider.listen();
      } else {
        if (this.config.get("startActivity")) {
          activityName = this.config.get("startActivity");
          _ref = this.options.activities;
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            activ = _ref[i];
            if (activ.name === activityName) {
              activ.poll();
            }
          }
          return this.logger.debug("Starting activity: " + (this.config.get("startActivity")));
        } else {
          _ref1 = this.options.activities;
          for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
            activ = _ref1[i];
            this.logger.debug("Spawning activity " + activ.name);
            activityProcess = spawn("node", ["" + module.parent.filename, "--startActivity", "" + activ.name, "--noCheck"]);
            activityProcess.stdout.on('data', function(data) {
              return console.log(data.toString().substr(0, data.toString().length - 1));
            });
            activityProcess.stderr.on('data', function(data) {
              return console.error(data.toString().substr(0, data.toString().length - 1));
            });
            activityProcess.on('end', function(data) {
              return _this.logger.debug('end of decider background process...');
            });
            activityProcess.on('exit', function(code) {
              if (code !== 0) {
                _this.logger.error("Activity " + activ.name + " background process ended abnormally, quitting");
                return process.exit(1);
              }
            });
          }
          this.logger.debug("Spawning decider");
          deciderProcess = spawn("node", ["" + module.parent.filename, "--startDecider", "--noCheck"]);
          deciderProcess.stdout.on('data', function(data) {
            return console.log(data.toString().substr(0, data.toString().length - 1));
          });
          deciderProcess.stderr.on('data', function(data) {
            return console.log(data.toString().substr(0, data.toString().length - 1));
          });
          deciderProcess.on('end', function(data) {
            return _this.logger.debug('end of decider background process...');
          });
          return deciderProcess.on('exit', function(code) {
            if (code !== 0) {
              _this.logger.error("Decider background process ended abnormally, quitting");
              return process.exit(1);
            }
          });
        }
      }
    };

    return Application;

  })();

  module.exports = createApplication;

}).call(this);
