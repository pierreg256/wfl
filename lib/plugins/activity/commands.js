// Generated by CoffeeScript 1.3.3
(function() {
  var cliActivity, inspect;

  inspect = require('eyes').inspector();

  cliActivity = require('./cli-activity');

  exports.usage = ['`<app> activity *` commands allow you manage your worflow', 'activites. Valid commands are:', '', '<app> activity list <domain-name> ', '<app> activity create <domain-name>  <activity-name>'];

  exports.list = function(domainName, callBack) {
    var options, swf, swfCfg, _ref, _ref1, _ref2, _ref3;
    if (!(domainName != null)) {
      cliActivity.app.log.error('You must pass the <domain-name> parameter');
      return callBack(true);
    }
    swfCfg = {
      'accessKeyId': (_ref = this.argv.k) != null ? _ref : cliActivity.app.config.get('accessKeyId'),
      'secretAccessKey': (_ref1 = this.argv.s) != null ? _ref1 : cliActivity.app.config.get('secretAccessKey'),
      'region': (_ref2 = (_ref3 = this.argv.r) != null ? _ref3 : cliActivity.app.config.get('region')) != null ? _ref2 : 'us-east-1'
    };
    swf = new cliActivity.app.Swf(swfCfg);
    options = {
      'Domain': domainName,
      'RegistrationStatus': 'REGISTERED'
    };
    return swf.ListActivityTypes(options, function(err, data) {
      var activitys, entry, _i, _len;
      if (err != null) {
        cliActivity.app.log.error("An error has occurred with the following details :".red);
        inspect(err);
      } else {
        cliActivity.app.log.info("Listing all REGISTERED activities".cyan);
        activitys = data.Body.typeInfos;
        for (_i = 0, _len = activitys.length; _i < _len; _i++) {
          entry = activitys[_i];
          cliActivity.app.log.info("Name: ".cyan + entry.activityType.name.green + ", Version: ".cyan + entry.activityType.version.green);
        }
      }
      return process.nextTick(function() {
        return callBack;
      });
    });
  };

  exports.list.usage = ['Lists all activitys currently registered', 'in your default region', '', '<app> activity list <domain-name>'];

  exports.create = function(domainName, activityName, callBack) {
    var options, swf, swfCfg, _ref, _ref1, _ref2, _ref3;
    if (!(domainName != null)) {
      cliActivity.app.log.error('You must pass the <domain-name> parameter');
      return callBack(true, true);
    }
    if (!(activityName != null)) {
      cliActivity.app.log.error('You must pass the <activity-name> parameter');
      return callBack(true, true);
    }
    swfCfg = {
      'accessKeyId': (_ref = this.argv.k) != null ? _ref : cliActivity.app.config.get('accessKeyId'),
      'secretAccessKey': (_ref1 = this.argv.s) != null ? _ref1 : cliActivity.app.config.get('secretAccessKey'),
      'region': (_ref2 = (_ref3 = this.argv.r) != null ? _ref3 : cliActivity.app.config.get('region')) != null ? _ref2 : 'us-east-1'
    };
    swf = new cliActivity.app.Swf(swfCfg);
    options = {
      "Domain": domainName,
      "Name": activityName,
      "Version": "1.0",
      "Description": "Automatically created activity type",
      "DefaultTaskStartToCloseTimeout": "600",
      "DefaultTaskHeartbeatTimeout": "120",
      "DefaultTaskList": {
        "name": activityName + "-default-tasklist"
      },
      "DefaultTaskScheduleToStartTimeout": "300",
      "DefaultTaskScheduleToCloseTimeout": "900"
    };
    return swf.RegisterActivityType(options, function(err, data) {
      if (err != null) {
        cliActivity.app.log.error("An error has occurred with the following details :");
        inspect(err);
      } else {
        cliActivity.app.log.info("Success!");
      }
      return process.nextTick(function() {
        return callBack;
      });
    });
  };

  exports.create.usage = ['Creates an activity for a given domain regsitered ', 'in your default region', '', '<app> activity create <domain-name> <activity-name>'];

  exports.run = function(domainName, activityName, callBack) {
    var fileName, filePath, options, theActivity, _ref, _ref1, _ref2, _ref3;
    if (!(domainName != null)) {
      cliActivity.app.log.error('You must pass the <domain-name> parameter');
      return callBack(true);
    }
    if (!(activityName != null)) {
      cliActivity.app.log.error('You must pass the <activity-name> parameter');
      return callBack(true);
    }
    fileName = "" + domainName + "-" + activityName + "-activity";
    filePath = "../../../workers/" + fileName;
    inspect(fileName);
    try {
      theActivity = require(filePath);
    } catch (error) {
      cliActivity.app.log.error("Cannot find file : " + fileName + ".js in the workers directory, please check your source code.");
      cliActivity.app.log.error("Additional information: " + error.message);
    }
    if (theActivity != null) {
      options = {
        'accessKeyId': (_ref = this.argv.k) != null ? _ref : cliActivity.app.config.get('accessKeyId'),
        'secretAccessKey': (_ref1 = this.argv.s) != null ? _ref1 : cliActivity.app.config.get('secretAccessKey'),
        'region': (_ref2 = (_ref3 = this.argv.r) != null ? _ref3 : cliActivity.app.config.get('region')) != null ? _ref2 : 'us-east-1',
        'domain': domainName,
        'taskList': activityName + '-default-tasklist'
      };
      theActivity.run(options);
    }
    return process.nextTick(function() {
      return callBack;
    });
  };

}).call(this);
